apply plugin: 'base'

allprojects {
	group = 'net.object-zoo.events4j'
	version = '1.3.0'
	ext.title = 'Events4J API'
	ext.vendor = 'object-zoo - Tilmann Kuhn'
	ext.javadocUrl = 'http://docs.oracle.com/javase/8/docs/api/'
	ext.encoding = 'UTF-8'
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'

	sourceCompatibility = 8
    targetCompatibility = 8
	
	repositories {
		mavenCentral()
	}

	publishing {
		publications {
			libraryPublication(MavenPublication) {
				from components.java
			}
		}
	}
	
	dependencies {
		testImplementation 'org.hamcrest:hamcrest-core:1.3'
		testImplementation 'org.hamcrest:hamcrest-library:1.3'
		testImplementation 'junit:junit:4.13'
		testImplementation 'org.mockito:mockito-all:1.9.5'
	}

	java {
		withJavadocJar()
		withSourcesJar()
	}

	jar	{
		manifest {
			attributes("Implementation-Title": project.title, "Implementation-Version": project.version, "Implementation-Vendor": project.vendor)
		}
	}
}
 
project(':events4j') {
	jar	{
		// include source files in jar for GWT support
		from sourceSets.main.allJava
	}
}

project(':events4j-async') {
	dependencies {
		api project(':events4j')
	}
}

task javadoc(type: Javadoc) {
	destinationDir = new File("${rootDir}/docs/api")
    source = files(subprojects.collect { project -> project.sourceSets.main.allJava })
    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
}

task distZip(type: Zip) {
	dependsOn ':events4j:build'
	dependsOn ':events4j-async:build'
	dependsOn ':javadoc'

	into("${baseName}-${version}") {
		from (rootDir)
		{
			include '*.*'
			exclude { file -> file.directory }
			exclude '*.jar'
		}
		from (rootDir)
		{
			include 'docs/**/*', 'events4j/**/*', 'events4j-async/**/*', 'lib/**/*'
			exclude '*/**/build', '*/**/generated'
		}
		from (files (subprojects.collect { project -> project.jar.destinationDir }))
		{
			include '*.jar'
		}
	}
}

allprojects {
	javadoc	{
		options {
			setUse(true)
			setAuthor(true)
			setVersion(true) 
			setNoTimestamp(true)
			encoding project.encoding
			links project.javadocUrl
			docTitle "<h1>${project.title} ${project.version}</h1>"
			windowTitle "${project.title} ${project.version}"
		}
	}
}